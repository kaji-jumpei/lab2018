ハイブリッド、エンコード

Encoding[5] にパスを渡す作業をコマンドウィンドウで行う

name:保存されるファイル名
filepatch:パス
width,height:縦横
g:GOP、何枚ごとにエンコードするか指定。何番目のフレームをGOPとするか。

tic:時間計測開始
system_dependent,addpatch:フォルダ内を関数として利用するために必要

global:グローバル宣言

%:コメントアウト
%%:領域、セクション

GOP：8枚ごとにエンコード
16x16のピクセル毎
Quant:量子化のサイズ、0-51

[Y U V]:yuvファイル,データ量が少なくなる
	Yを対象とすることが多い

for文内で、1-Quant(1-51)までを実行
全候補となるパラメータとしている

Y_R(レート):データ量を保存するところ

分子：画素値の最大値、分母：平均値

Y_Bits：ビット内のものを保存する
各ビデオフレームごとに取得

Y_camera：各ビデオフレームをエンコードしデコードする。圧縮した後の画素値の値

受信後にユーザが受け取るものと同じになる

Y_DCT：DCT変換を行ったときの値。エンコードして戻してオリジナルとの差を取って、DCTをかけたもの。


for yuv = 1：yだけを取り出すため、1

disp：printf

Creat header：unsigned int を doule型に変換している
シーケンスの1番目を保存
：(コロン)：全体を表す

size：それぞれの要素でいくつ入っているか
縦方向の画素、横方向の画素数、1

エンコード
先頭をIフレームとする。(1111)：これをIフレームを表すものとする。
2つの行列を横結合する。

encode_i_frame：Iフレームがエンコードされる
Seq_r：エンコードしてデコードした画像情報が返ってくる
bits：Iフレームが入ったbit
sae：二乗絶対誤差、エンコードした際の元との誤差

Iフレームの中身を追加する

find_psnr：オリジナルとの誤差でPSNR求めれる
R_reg：出力されたビット数
Disto：ノイズの値
Bits_reg：
Camera：エンコード後のカメラの

[Pフレームをエンコード]
2から8番目までのフレームをPフレームに
Pフレームの識別番号：0000

Y{K}：2番目のビデオフレーム
X(   1)：エンコード後のデータ
X(   2)：エンコードしたいデータ

encode_p_frame：Xの値、量子化サイズ(どれくらいで量子化するか)、ブロックサイズ
あるブロックと、エンコード済みと類似するものを見つけ、差を取る。



８カメラずつカメラを読み込むようにする
cifはファイルサイズ賞
Quantを小さくする

width=352
height=288